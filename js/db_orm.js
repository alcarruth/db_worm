// Generated by CoffeeScript 2.4.1
(function() {
  //!/usr/bin/env coffee
  // -*- coding: utf-8 -*-
  var Back_Reference, Column, Local_Method, Reference, SQL_Column, SQL_Date, SQL_Integer, SQL_String, Table, Table_Row,
    boundMethodCheck = function(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new Error('Bound instance method accessed before binding'); } };

  Local_Method = class Local_Method {
    constructor(method1) {
      this.__method = this.__method.bind(this);
      this.method = method1;
    }

    __method(name) {
      this.name = name;
      return this.method;
    }

  };

  Column = class Column {
    constructor() {
      this.__method = this.__method.bind(this);
    }

    __method(name) {
      var error;
      this.name = name;
      try {
        return this.__column_method();
      } catch (error1) {
        error = error1;
        return console.log(`Error in ${this.constructor.name} method.`);
      }
    }

  };

  Reference = class Reference extends Column {
    constructor(table_name, key_name) {
      super();
      this.__column_method = this.__column_method.bind(this);
      this.table_name = table_name;
      this.key_name = key_name;
    }

    __column_method() {
      var key_name, table_name;
      boundMethodCheck(this, Reference);
      table_name = this.table_name;
      key_name = this.key_name;
      return function() {
        var key, table;
        table = this.__db.tables[table_name];
        key = this.__obj[key_name];
        return table.find_by_id(key);
      };
    }

  };

  Back_Reference = class Back_Reference extends Column {
    constructor(table_name, col) {
      super();
      this.__column_method = this.__column_method.bind(this);
      this.table_name = table_name;
      this.col = col;
    }

    __column_method() {
      var col, table_name;
      boundMethodCheck(this, Back_Reference);
      table_name = this.table_name;
      col = this.col;
      return function() {
        var id, table;
        table = this.__db.tables[table_name];
        id = this.__id;
        return table.find_where(col, id);
      };
    }

  };

  SQL_Column = class SQL_Column extends Column {
    constructor() {
      super();
      this.__column_method = this.__column_method.bind(this);
    }

    __column_method() {
      var name;
      boundMethodCheck(this, SQL_Column);
      name = this.name;
      return function() {
        return this.__obj[name];
      };
    }

  };

  SQL_String = class SQL_String extends SQL_Column {};

  SQL_Integer = class SQL_Integer extends SQL_Column {};

  SQL_Date = class SQL_Date extends SQL_Column {};

  //------------------------------------------------------------------------------------
  // meta classes extended by the definitions below

  // An instance of class Table corresponds to a table in the PostgreSQL
  // DB.  Note that the constructor argument includes a reference to a
  // Row_Class which must be an instance of class Table_Row (below).
  Table = class Table {
    constructor(spec) {
      this.__add_methods = this.__add_methods.bind(this);
      // TODO: insert into DB
      this.insert = this.insert.bind(this);
      this.__add_row = this.__add_row.bind(this);
      this.find_all = this.find_all.bind(this);
      this.find_by_id = this.find_by_id.bind(this);
      this.find_where = this.find_where.bind(this);
      this.__remove_row = this.__remove_row.bind(this);
      this.__db = spec.db;
      this.__name = spec.tablename;
      this.__primary_key = spec.primary_key;
      this.__sql_columns = spec.sql_columns || [];
      this.__pseudo_columns = spec.pseudo_columns || [];
      //@__Row_Class = spec.row_class
      this.__Row_Class = this.__row_class(this);
      this.__rows = {};
      this.__db.tables[this.__name] = this;
      this.__unique_id = `table-${this.__name}`;
      this.__add_methods();
    }

    __row_class(table) {
      var __Row_Class;
      return __Row_Class = class __Row_Class extends Table_Row {
        constructor(obj) {
          super(table, obj);
        }

      };
    }

    __add_methods() {
      var column, name, ref, ref1, results;
      ref = this.__sql_columns;
      for (name in ref) {
        column = ref[name];
        this.__Row_Class.prototype[name] = column.__method(name);
      }
      ref1 = this.__pseudo_columns;
      results = [];
      for (name in ref1) {
        column = ref1[name];
        results.push(this.__Row_Class.prototype[name] = column.__method(name));
      }
      return results;
    }

    insert(obj) {
      var col, cols, error, k, text, v, values;
      cols = (function() {
        var ref, results;
        ref = this.__sql_columns;
        results = [];
        for (k in ref) {
          v = ref[k];
          results.push(k);
        }
        return results;
      }).call(this);
      text = `insert into ${this.__name}(${cols.join(',')})`;
      values = (function() {
        var i, len, results;
        results = [];
        for (i = 0, len = cols.length; i < len; i++) {
          col = cols[i];
          results.push(obj[col]);
        }
        return results;
      })();
      console.log(`Trying query:\n  text: "${text}"\n  values: [ ${values} ]\n`);
      try {

      } catch (error1) {
        // db.query(text, values)
        error = error1;
        return console.log(error);
      }
    }

    __add_row(obj) {
      var row;
      row = new this.__Row_Class(obj);
      return this.__rows[row.get_primary_key()] = row;
    }

    async find_all(id) {
      var error, row, rows, text, values;
      text = `select * from ${this.__name}`;
      values = [];
      try {
        rows = this.__db.query(text, values);
        return (await (async function() {
          var i, len, ref, results;
          ref = (await rows);
          results = [];
          for (i = 0, len = ref.length; i < len; i++) {
            row = ref[i];
            results.push(new this.__Row_Class(row));
          }
          return results;
        }).call(this));
      } catch (error1) {
        error = error1;
        console.log(`Query failed:\n  text: "${text}"\n  values: [ ${values} ]\n`);
        return console.log(error);
      }
    }

    async find_by_id(id) {
      var error, rows, text, values;
      //text = "select * from #{@__name} where #{@__primary_key} = $1 "
      //values = [ id ]
      text = `select * from ${this.__name} where ${this.__primary_key} = '${id}' `;
      values = [];
      try {
        rows = this.__db.query(text, values);
        return new this.__Row_Class(((await rows))[0]);
      } catch (error1) {
        error = error1;
        return console.log(error);
      }
    }

    async find_where(col, val) {
      var error, row, rows, text, values;
      //text = "select * from #{@__name} where #{col} = '$1' "
      //values = [ val ]
      text = `select * from ${this.__name} where ${col} = '${val}' `;
      values = [];
      try {
        rows = this.__db.query(text, values);
        return (await (async function() {
          var i, len, ref, results;
          ref = (await rows);
          results = [];
          for (i = 0, len = ref.length; i < len; i++) {
            row = ref[i];
            results.push(new this.__Row_Class(row));
          }
          return results;
        }).call(this));
      } catch (error1) {
        error = error1;
        console.log(`Query failed:\n  text: "${text}"\n  values: [ ${values} ]\n`);
        return console.log(error);
      }
    }

    __remove_row(id) {
      return delete this.__rows[id];
    }

  };

  // Class Table_Row is the companion to class Table (above)
  // Note that the constructor requires a @__table argument.
  // Classes which extend Table Row must call super(table)
  // in order to link the row type to the appropriate table
  // instance.

  Table_Row = class Table_Row {
    constructor(__table, __obj) {
      var method, name, ref;
      this.simple_obj = this.simple_obj.bind(this);
      this.toJSON = this.toJSON.bind(this);
      this.toString = this.toString.bind(this);
      this.toHTML = this.toHTML.bind(this);
      this.__table = __table;
      this.__obj = __obj;
      this.__db = this.__table.__db;
      ref = this.__proto__;
      for (name in ref) {
        method = ref[name];
        this[name] = method.bind(this);
      }
      this.__id = this.__obj[this.__table.__primary_key];
      this.__unique_id = `${this.__table.__name}-${this.__id}`;
    }

    simple_obj() {
      var col, obj, ref, val;
      obj = {};
      ref = this.__obj;
      for (col in ref) {
        val = ref[col];
        obj[col] = val;
      }
      return obj;
    }

    toJSON() {
      return JSON.stringify(this.simple_obj());
    }

    toString() {
      return this.toJSON();
    }

    toHTML() {}

  };

  // some suitable default
  exports.Table = Table;

  exports.Table_Row = Table_Row;

  exports.SQL_Column = SQL_Column;

  exports.SQL_String = SQL_String;

  exports.SQL_Integer = SQL_Integer;

  exports.SQL_Date = SQL_Date;

  exports.Reference = Reference;

  exports.Local_Method = Local_Method;

  exports.Back_Reference = Back_Reference;

}).call(this);
