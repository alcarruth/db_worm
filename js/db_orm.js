// Generated by CoffeeScript 2.4.1
(function() {
  //!/usr/bin/env coffee
  // -*- coding: utf-8 -*-
  var Back_Reference, Date_Column, Integer_Column, Reference, String_Column, Table, Table_Row;

  Reference = class Reference {
    constructor(table_name1, key_name1) {
      this.__method = this.__method.bind(this);
      this.table_name = table_name1;
      this.key_name = key_name1;
    }

    __method() {
      var key_name, table_name;
      table_name = this.table_name;
      key_name = this.key_name;
      return function() {
        var error, key, table;
        try {
          table = this.__db.tables[table_name];
          key = this.__local[key_name];
          return table.__find_by_id(key);
        } catch (error1) {
          error = error1;
          return console.log('Error in reference method.');
        }
      };
    }

  };

  Back_Reference = class Back_Reference {
    constructor(table_name1, col1) {
      this.__method = this.__method.bind(this);
      this.table_name = table_name1;
      this.col = col1;
    }

    __method() {
      var col, table_name;
      table_name = this.table_name;
      col = this.col;
      return function() {
        var error, id, table;
        try {
          table = this.__db.tables[table_name];
          id = this.__id;
          return table.__find_all(col, id);
        } catch (error1) {
          error = error1;
          return console.log('Error back_reference method.');
        }
      };
    }

  };

  String_Column = class String_Column {
    constructor() {
      this.__method = this.__method.bind(this);
    }

    __method(name) {
      return function() {
        var error;
        try {
          return this.__local[name];
        } catch (error1) {
          error = error1;
          return console.log('Error in string column method');
        }
      };
    }

  };

  Integer_Column = class Integer_Column {
    constructor() {
      this.__method = this.__method.bind(this);
    }

    __method(name) {
      return function() {
        var error;
        try {
          return this.__local[name];
        } catch (error1) {
          error = error1;
          return console.log('Error in integer column method');
        }
      };
    }

  };

  Date_Column = class Date_Column {
    constructor() {
      this.__method = this.__method.bind(this);
    }

    __method(name) {
      return function() {
        var error;
        try {
          return this.__local[name];
        } catch (error1) {
          error = error1;
          return console.log('Error in date column method');
        }
      };
    }

  };

  //------------------------------------------------------------------------------------
  // meta classes extended by the definitions below

  // An instance of class Table corresponds to a table in the PostgreSQL
  // DB.  Note that the constructor argument includes a reference to a
  // Row_Class which must be an instance of class Table_Row (below).
  Table = class Table {
    constructor(spec) {
      this.__add_methods = this.__add_methods.bind(this);
      this.__add_methods_old = this.__add_methods_old.bind(this);
      this.__add_column_method = this.__add_column_method.bind(this);
      this.__add_foreign_key_method = this.__add_foreign_key_method.bind(this);
      this.__add_back_reference_method = this.__add_back_reference_method.bind(this);
      // __handle_back_reference: (row, name, spec) =>

      // TODO: insert into DB
      this.__add_row = this.__add_row.bind(this);
      this.__find_by_id = this.__find_by_id.bind(this);
      this.__find_all = this.__find_all.bind(this);
      this.__remove_row = this.__remove_row.bind(this);
      this.__db = spec.db;
      this.__name = spec.tablename;
      this.__primary_key = spec.primary_key;
      this.__columns = spec.columns || [];
      this.__foreign_keys = spec.foreign_keys || {};
      this.__back_references = spec.back_references || {};
      this.__Row_Class = spec.row_class;
      this.__rows = {};
      this.__db.tables[this.__name] = this;
      this.__add_methods();
    }

    __add_methods() {
      var column, name, ref, results;
      ref = this.__columns;
      results = [];
      for (name in ref) {
        column = ref[name];
        results.push(this.__Row_Class.prototype[name] = column.__method(name));
      }
      return results;
    }

    __add_methods_old() {
      var i, len, name, ref, ref1, ref2, results, spec;
      ref = this.__columns;
      for (i = 0, len = ref.length; i < len; i++) {
        name = ref[i];
        this.__add_column_method(name);
      }
      ref1 = this.__foreign_keys;
      for (name in ref1) {
        spec = ref1[name];
        this.__add_foreign_key_method(name, spec);
      }
      ref2 = this.__back_references;
      results = [];
      for (name in ref2) {
        spec = ref2[name];
        results.push(this.__add_back_reference_method(name, spec));
      }
      return results;
    }

    __add_column_method(name) {
      return this.__Row_Class.prototype[name] = function() {
        return this.__local[name];
      };
    }

    __add_foreign_key_method(name, spec) {
      var key_name, table_name;
      ({table_name, key_name} = spec);
      return this.__Row_Class.prototype[name] = function() {
        var key, table;
        table = this.__db.tables[table_name];
        key = this.__local[key_name];
        return table.__find_by_id(key);
      };
    }

    __add_back_reference_method(name, spec) {
      var col, table_name;
      ({table_name, col} = spec);
      return this.__Row_Class.prototype[name] = function() {
        var table;
        table = this.__db.tables[table_name];
        return table.__find_all(col, this.__id);
      };
    }

    __add_row(obj) {
      var row;
      row = new this.__Row_Class(obj);
      return this.__rows[row.get_primary_key()] = row;
    }

    async __find_by_id(id) {
      var error, qs, rows;
      qs = `select * from ${this.__name} where ${this.__primary_key} = '${id}'`;
      try {
        rows = (await this.__db.query(qs));
        return new this.__Row_Class(rows[0]);
      } catch (error1) {
        error = error1;
        return console.log(`Query failed: "${qs}"`);
      }
    }

    async __find_all(col, val) {
      var qs, row, rows;
      qs = `select * from ${this.__name} where ${col} = '${val}'`;
      try {
        rows = (await this.__db.query(qs));
        return (function() {
          var i, len, results;
          results = [];
          for (i = 0, len = rows.length; i < len; i++) {
            row = rows[i];
            results.push(new this.__Row_Class(row));
          }
          return results;
        }).call(this);
      } catch (error1) {
        return console.log(`Query failed: "${qs}"`);
      }
    }

    __remove_row(id) {
      return delete this.__rows[id];
    }

  };

  // Class Table_Row is the companion to class Table (above)
  // Note that the constructor requires a @__table argument.
  // Classes which extend Table Row must call super(table)
  // in order to link the row type to the appropriate table
  // instance.

  Table_Row = class Table_Row {
    constructor(__table) {
      var method, name, ref;
      this.__init = this.__init.bind(this);
      this.__simple_obj = this.__simple_obj.bind(this);
      this.__toJSON = this.__toJSON.bind(this);
      this.__toString = this.__toString.bind(this);
      this.__toHTML = this.__toHTML.bind(this);
      this.__table = __table;
      this.__db = this.__table.__db;
      this.__local = {};
      ref = this.__proto__;
      for (name in ref) {
        method = ref[name];
        this[name] = method.bind(this);
      }
    }

    __init(obj) {
      var _, col, ref;
      ref = this.__table.__columns;
      for (col in ref) {
        _ = ref[col];
        this.__local[col] = obj[col] || null;
      }
      return this.__id = this.__local[this.__table.__primary_key];
    }

    __simple_obj() {
      var col, i, len, obj, ref;
      obj = {};
      ref = this.__table.__columns;
      for (i = 0, len = ref.length; i < len; i++) {
        col = ref[i];
        obj[col] = this[col]();
      }
      return obj;
    }

    __toJSON() {
      return JSON.stringify(this.__simple_obj());
    }

    __toString() {
      return this.__toJSON();
    }

    __toHTML() {}

  };

  // some suitable default
  exports.Table = Table;

  exports.Table_Row = Table_Row;

  exports.String_Column = String_Column;

  exports.Integer_Column = Integer_Column;

  exports.Date_Column = Date_Column;

  exports.Reference = Reference;

  exports.Back_Reference = Back_Reference;

}).call(this);
